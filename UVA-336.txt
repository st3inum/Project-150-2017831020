#include<bits/stdc++.h>
#define max 35

using namespace std;

long int mat[max][max],color[max],cost[max],cst,t=1,str;

void bfs(long int start,long int node)
{
    memset(color,0,sizeof(color));
    memset(cost,0,sizeof(cost));

    long int i,j,u,cnt;
    queue<long int >Q;

    Q.push(start);
    color[start] =1;
    cost[start] = 0;

    while(!Q.empty())
    {
        u = Q.front();
        Q.pop();

        for(i=1;i<=node;i++)
        {

            if(mat[u][i]==1 && !color[i])
            {

                color[i] = 1;
                cost[i] = cost[u]+1;
                Q.push(i);
            }
        }
    }
    cnt = 0;

    for(i=1;i<=node;i++)
    {

        if(cost[i]>cst || cost[i]==0)
            cnt++;
    }
    printf("Case %ld: %ld nodes not reachable from node %ld with TTL = %ld.\n",t++,cnt-1,str,cst);

}

int main()
{
    map<long int ,long int >mp;
    long int node,edge,start,i,j,k,x,y,a;
    while(scanf("%ld",&edge)&&edge)
    {
        memset(mat,0,sizeof(mat));
        mp.clear();

        a = 1;
        for(i=1;i<=edge;i++)
        {
            scanf("%ld%ld",&x,&y);

            if(mp.find(x)==mp.end())
            {
                mp[x]=a++;
            }

             if(mp.find(y)==mp.end())
            {
                mp[y]=a++;
            }
            mat[mp[x]][mp[y]]=1;
            mat[mp[y]][mp[x]]=1;

        }
        node = a-1;
        while(scanf("%ld%ld",&start,&cst)==2)
        {
            if(start==0 && cst==0)
            {
                break;

            }
            str = start;
            bfs(mp[start],node);
        }
    }

    return 0;
}